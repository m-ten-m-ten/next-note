{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nimport remark from \"remark\";\nimport html from \"remark-html\";\nvar postsDirectory = path.join(process.cwd(), \"posts\");\nexport function getSortedPostsData() {\n  // /posts 配下のファイル名を取得する。\n  var fileNames = fs.readdirSync(postsDirectory);\n  var allPostData = [];\n  fileNames.forEach(function (fileName) {\n    if (fileName.charAt(0) !== '.' && fileName.charAt(0) !== '_') {\n      // slugを取得するためにファイル名から\".md\"を削除する。\n      var slug = fileName.replace(/\\.md$/, \"\"); // マークダウンファイルを文字列として読み取る。\n\n      var fullPath = path.join(postsDirectory, fileName);\n      var fileContents = fs.readFileSync(fullPath, \"utf8\"); // 投稿のメタデータ部分を解析するためにgray-matterを使う。\n\n      var matterResult = matter(fileContents); // データをslugと合わせる。\n\n      allPostData.push(_objectSpread({\n        slug: slug\n      }, matterResult.data));\n    }\n  });\n  return allPostData.sort(function (a, b) {\n    if (a.pub_date < b.pub_date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\nexport function getAllPostSlugs() {\n  var fileNames = fs.readdirSync(postsDirectory);\n  return fileNames.map(function (fileName) {\n    return {\n      params: {\n        slug: fileName.replace(/\\.md$/, \"\")\n      }\n    };\n  });\n}\nexport function getPostData(_x) {\n  return _getPostData.apply(this, arguments);\n}\n\nfunction _getPostData() {\n  _getPostData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(slug) {\n    var fullPath, fileContents, matterResult, processedContent, contentHtml;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            fullPath = path.join(postsDirectory, \"\".concat(slug, \".md\"));\n            fileContents = fs.readFileSync(fullPath, \"utf8\");\n            matterResult = matter(fileContents);\n            _context.next = 5;\n            return remark().use(html).process(matterResult.content);\n\n          case 5:\n            processedContent = _context.sent;\n            contentHtml = processedContent.toString();\n            return _context.abrupt(\"return\", _objectSpread({\n              slug: slug,\n              contentHtml: contentHtml\n            }, matterResult.data));\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getPostData.apply(this, arguments);\n}\n\nexport function getCategories() {\n  var allPostData = getSortedPostsData();\n  var categories = [];\n  allPostData.forEach(function (post) {\n    if (post.category && !categories.includes(post.category)) {\n      categories.push(post.category);\n    }\n  });\n  return categories;\n}\nexport function getCategoryPaths() {\n  var categories = getCategories();\n  return categories.map(function (category) {\n    return {\n      params: {\n        category: category\n      }\n    };\n  });\n}\nexport function getSortedCategoryPostsData(category) {\n  var allPostData = getSortedPostsData();\n  var categoryPostsData = [];\n  allPostData.forEach(function (post) {\n    if (post.category === category) {\n      categoryPostsData.push(post);\n    }\n  });\n  return categoryPostsData;\n}\nexport function getTags() {\n  var allPostData = getSortedPostsData();\n  var tags = [];\n  allPostData.forEach(function (post) {\n    if (post.tags) {\n      post.tags.forEach(function (tag) {\n        if (!tags.includes(tag)) {\n          tags.push(tag);\n        }\n      });\n    }\n  });\n  return tags;\n}\nexport function getTagPaths() {\n  var tags = getTags();\n  return tags.map(function (tag) {\n    return {\n      params: {\n        tag: tag\n      }\n    };\n  });\n}\nexport function getSortedTagPostsData(tag) {\n  var allPostData = getSortedPostsData();\n  var tagPostsData = [];\n  allPostData.forEach(function (post) {\n    if (post.tags && post.tags.includes(tag)) {\n      tagPostsData.push(post);\n    }\n  });\n  return tagPostsData;\n}","map":{"version":3,"sources":["/Users/matsuotenmei/program/NextJs/next-note/src/lib/posts.ts"],"names":["fs","path","matter","remark","html","postsDirectory","join","process","cwd","getSortedPostsData","fileNames","readdirSync","allPostData","forEach","fileName","charAt","slug","replace","fullPath","fileContents","readFileSync","matterResult","push","data","sort","a","b","pub_date","getAllPostSlugs","map","params","getPostData","use","content","processedContent","contentHtml","toString","getCategories","categories","post","category","includes","getCategoryPaths","getSortedCategoryPostsData","categoryPostsData","getTags","tags","tag","getTagPaths","getSortedTagPostsData","tagPostsData"],"mappings":"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","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nimport remark from \"remark\";\nimport html from \"remark-html\";\n\nconst postsDirectory = path.join(process.cwd(), \"posts\");\n\nexport function getSortedPostsData() {\n  // /posts 配下のファイル名を取得する。\n  const fileNames = fs.readdirSync(postsDirectory);\n\n  const allPostData = [];\n  \n  fileNames.forEach((fileName) => {\n    if (fileName.charAt(0) !== '.' && fileName.charAt(0) !== '_') {\n      // slugを取得するためにファイル名から\".md\"を削除する。\n      const slug = fileName.replace(/\\.md$/, \"\");\n\n      // マークダウンファイルを文字列として読み取る。\n      const fullPath = path.join(postsDirectory, fileName);\n      const fileContents = fs.readFileSync(fullPath, \"utf8\");\n\n      // 投稿のメタデータ部分を解析するためにgray-matterを使う。\n      const matterResult = matter(fileContents);\n\n      // データをslugと合わせる。\n      allPostData.push({\n        slug,\n        ...matterResult.data,\n      });\n    }\n  });\n\n  return allPostData.sort((a, b) => {\n    if (a.pub_date < b.pub_date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\n\nexport function getAllPostSlugs() {\n  const fileNames = fs.readdirSync(postsDirectory);\n  return fileNames.map((fileName) => {\n    return {\n      params: {\n        slug: fileName.replace(/\\.md$/, \"\"),\n      },\n    };\n  });\n}\n\nexport async function getPostData(slug) {\n  const fullPath = path.join(postsDirectory, `${slug}.md`);\n  const fileContents = fs.readFileSync(fullPath, \"utf8\");\n\n  const matterResult = matter(fileContents);\n\n  const processedContent = await remark()\n    .use(html)\n    .process(matterResult.content);\n  const contentHtml = processedContent.toString();\n\n  return {\n    slug,\n    contentHtml,\n    ...matterResult.data,\n  };\n}\n\nexport function getCategories() {\n  const allPostData = getSortedPostsData();\n  const categories = [];\n  allPostData.forEach((post) => {\n    if (post.category && !categories.includes(post.category)) {\n      categories.push(post.category);\n    }\n  });\n  return categories;\n}\n\nexport function getCategoryPaths() {\n  const categories = getCategories();\n  return categories.map((category) => {\n    return {\n      params: {\n        category,\n      },\n    };\n  });\n}\n\nexport function getSortedCategoryPostsData(category) {\n  const allPostData = getSortedPostsData();\n  const categoryPostsData = [];\n  allPostData.forEach((post) => {\n    if (post.category === category) {\n      categoryPostsData.push(post);\n    }\n  });\n  return categoryPostsData;\n}\n\nexport function getTags() {\n  const allPostData = getSortedPostsData();\n  const tags = [];\n  allPostData.forEach((post) => {\n    if (post.tags) {\n      post.tags.forEach((tag) => {\n        if (!tags.includes(tag)) {\n          tags.push(tag);\n        }\n      });\n    }\n  });\n  return tags;\n}\n\nexport function getTagPaths() {\n  const tags = getTags();\n  return tags.map((tag) => {\n    return {\n      params: {\n        tag,\n      },\n    };\n  });\n}\n\nexport function getSortedTagPostsData(tag) {\n  const allPostData = getSortedPostsData();\n  const tagPostsData = [];\n  allPostData.forEach((post) => {\n    if (post.tags && post.tags.includes(tag)) {\n      tagPostsData.push(post);\n    }\n  });\n  return tagPostsData;\n}\n"]},"metadata":{},"sourceType":"module"}